#!/usr/bin/env node

'use strict'

const { ArgumentParser } = require('argparse')
const crypto = require('crypto')
const os = require('os')
const VrpcAgent = require('./VrpcAgent')
const path = require('path')

function generateAgentName () {
  const { username } = os.userInfo()
  const pathId = crypto.createHash('md5').update(path.resolve()).digest('hex').substr(0, 4)
  return `${username}-${pathId}@${os.hostname()}-${os.platform()}-js`
}

const parser = new ArgumentParser({
  add_help: true,
  description: 'Starts a vrpc agent for node.js'
})
parser.add_argument(
  ['-d', '--domain'],
  {
    help: 'The prefix for all vrpc communication',
    type: 'string',
    default: 'vrpc'
  }
)
parser.add_argument(
  ['-a', '--agent'],
  {
    help: 'Name of the agent for remote addressing',
    type: 'string',
    default: generateAgentName()
  }
)
parser.add_argument(
  ['-t', '--token'],
  {
    help: 'Token for authentication and authorization',
    type: 'string'
  }
)
parser.add_argument(
  ['-f', '--file'],
  {
    help: 'Name of the adapter file (Default is \'PATH/adapter.js\')',
    type: 'string',
    default: './adapter.js'
  }
)
parser.add_argument(
  ['-b', '--broker'],
  {
    help: 'The broker to use',
    type: 'string',
    default: 'mqtts://vrpc.io:8883'
  }
)
parser.add_argument(
  '-V', '-v',
  '--userVersion',
  {
    help: 'User defined agent version. May be checked on the remote side for compatibility checks.',
    required: false,
    dest: 'version'
  }
)
parser.add_argument(
  '--version',
  {
    help: 'Returns the VRPC version this client was built with.',
    action: 'version',
    version: 'v2.3.2'
  }
)

const args = parser.parse_args()

// Load the adapter
try {
  require(path.join(process.cwd(), args.file))
} catch (err) {
  console.error('Could not find \'adapter.js\' file')
  process.exit(1)
}

// Start the agent
const { domain, agent, broker, token } = args
const vrpcAgent = new VrpcAgent({ domain, agent, broker, token })

vrpcAgent.serve().catch(err => {
  console.error(`Error happened on agent: ${err.message}`)
})
